
services:
  nginx:
    build: ./requirements/nginx
    container_name: nginx
    ports:
      - "8090:80"
      - "8092:443"
    volumes:
      - .web:/var/www/html

  wordpress:
    build: ./requirements/wordpress
    ports:
      - "8099:80"
      - "8091:443"
    container_name: wp-php
    volumes:
      - .web:/var/www/html

# services:
# 	wordpress: wordpress:penultimate
# 		image:
# 		container_name: wordpress
# 		restart: always
# 		volumes:
# 		- ./conf:/var/www/html
#     environment:

# 	mariadb:
# 		image: mariadb:penultimate
# 		container_name: mariadb
# 		restart: always
#     environment:

# 	nginx:
# 		image: nginx:penultimate
# 		container_name: nginx
# 		restart: always





# --------------------------------------------------
# services:
#   my_ubuntu:
#     image: celtak/ubuntu-ping-ip
#     container_name: celtak_ubuntu
# Docker
# These instructions tell us, that only one container will be launched.
# my_ubuntu is the name of the block. The line starting with image indicates
# the image we will use. And finally container_name is the name given to our
# container.
# ---------------------------------------------------
# Run docker-compose.yml
# To run our docker-compose.yml, we need to be in the directory that contains the file in question (if there is no file with the name docker-compose.yml or docker-compose.yaml, it will not work).

# And we type the following command.

# docker compose up
# Bash
# The image will be downloaded (if it is not already present in our machine). The container will be created and then automatically stopped. But it will be present (but not started).

# docker ps -a
# Bash
# CONTAINER ID   IMAGE                   COMMAND   CREATED              STATUS                          PORTS     NAMES
# 751b69a76700   celtak/ubuntu-ping-ip   "bash"    About a minute ago   Exited (0) About a minute ago             celtak_ubuntu
# Bash
# But then the container stopped and we couldn't interact with it.

# To fix this we will add two lines to our file.

# services:
#   my_ubuntu:
#     image: celtak/ubuntu-ping-ip
#     container_name: celtak_ubuntu
#     stdin_open: true
#     tty: true
# Docker
# Save the file and type the following command again.

# docker compose up
# Bash
# The container is launched. Now open another terminal and type the following command.

# docker ps
# Bash
# We can clearly see our container which was launched and did not stop ðŸ˜ƒ.

# CONTAINER ID   IMAGE                   COMMAND   CREATED              STATUS              PORTS     NAMES
# acbfc3b9b037   celtak/ubuntu-ping-ip   "bash"    About a minute ago   Up About a minute             celtak_ubuntu
# Bash
# To interact directly with it copy and paste the command below.

# docker exec -it acbfc3b9b037 bash
# Bash
# We entered the container safely.

# Type exitto exit and click ctrl + C on the other terminal to stop the container.

# Detach the container from the terminal
# It is possible to do the same thing, but by detaching the container from the terminal. It will then run in the background. To do this, simply add the option -d.

# docker compose up -d
# Bash
# By viewing the list of running containers, you will see that the one described in the docker-compose.yml exists.

# docker ps
# Bash
# PORTS     NAMES
# b60d8c50bb8c   celtak/ubuntu-ping-ip   "bash"    3 seconds ago   Up 2 seconds             celtak_ubuntu
# Bash
# Stop
# To stop the container, we can use the method we already know .

# But we can do it another way.

# docker compose stop
# Bash
# Similarly, to delete our container, we can rely on what we have already learned or use the following command.

# docker compose rm

# services:
#   wordpress:
#     image: wordpress:latest
#     container_name: wordpress
#     restart: always
#     volumes:
#       - ./conf:/var/www/html
#     environment:
#       WORDPRESS_DB_HOST: mariadb:3306
#       WORDPRESS_DB_USER: your_database_user
#       WORDPRESS_DB_PASSWORD: your_database_password
#       WORDPRESS_DB_NAME: your_database_name
#     entrypoint: ["/bin/bash", "-c", "/usr/local/bin/auto_config.sh && docker-entrypoint.sh apache2-foreground"]
#     depends_on:
#       - mariadb